# https://mattvsts.github.io/2020/01/07/create-a-build-matrix-with-azure-pipelines/

trigger:
  branches:
    include:
    - master
    - releases/*
  paths:
    include:
    - '*'
    exclude:
    - 'azure-pipeline-gcc-tests.yml'
    - '4gcc/test-gcc.sh'

variables:
  FLAGS: "-O2"

jobs:
- job: GCC
  pool:
    vmImage: 'ubuntu-20.04'
  timeoutInMinutes: 360
  strategy:
    matrix:
      '6.5-Wheezy':
        GCCURL: 'https://ftp.gnu.org/gnu/gcc/gcc-6.5.0/gcc-6.5.0.tar.xz'
        IMAGE: "debian:7"
        ARTIFACT: "gcc-x86_64-linux-6.5.0"
      '7.5-Wheezy':
        GCCURL: 'https://ftp.gnu.org/gnu/gcc/gcc-7.5.0/gcc-7.5.0.tar.xz'
        IMAGE: "debian:7"
        ARTIFACT: "gcc-x86_64-linux-7.5.0"
      '11.1-Wheezy':
        GCCURL: "https://ftp.gnu.org/gnu/gcc/gcc-11.1.0/gcc-11.1.0.tar.xz"
        IMAGE: "debian:7"
        ARTIFACT: "gcc-x86_64-linux-11.1.0"
        USEGCC: '10'
      '11.2-Wheezy':
        GCCURL: "https://ftp.gnu.org/gnu/gcc/gcc-11.2.0/gcc-11.2.0.tar.xz"
        IMAGE: "debian:7"
        ARTIFACT: "gcc-x86_64-linux-11.2.0"
        USEGCC: '10'
      '8.5-Wheezy':
        GCCURL: "https://ftp.gnu.org/gnu/gcc/gcc-8.5.0/gcc-8.5.0.tar.xz"
        IMAGE: "debian:7"
        ARTIFACT: "gcc-x86_64-linux-8.5.0"
      '9.4-Wheezy':
        GCCURL: 'https://ftp.gnu.org/gnu/gcc/gcc-9.4.0/gcc-9.4.0.tar.xz'
        IMAGE: "debian:7"
        ARTIFACT: "gcc-x86_64-linux-9.4.0"
      '10.2-Wheezy':
        GCCURL: "https://ftp.gnu.org/gnu/gcc/gcc-10.2.0/gcc-10.2.0.tar.xz"
        IMAGE: "debian:7"
        ARTIFACT: "gcc-x86_64-linux-10.2.0"
      '10.3-Wheezy':
        GCCURL: "https://ftp.gnu.org/gnu/gcc/gcc-10.3.0/gcc-10.3.0.tar.xz"
        IMAGE: "debian:7"
        ARTIFACT: "gcc-x86_64-linux-10.3.0"


  steps:

  - script: |
      set -e
      set -u
      script=https://raw.githubusercontent.com/devizer/test-and-build/master/install-build-tools-bundle.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash >/dev/null
      cd 4gcc

      Say "Check CPU"
      is_platinum="$(cat /proc/cpuinfo | grep Platinum | head -1)"
      if [[ "${is_platinum:-}" != "" ]]; then
        Say "ERROR! XEON Platinum is not supported"
        exit 234
      fi

      Say "Start image $(IMAGE)"
      docker run --privileged -t --rm -d --hostname gcc-container --name gcc-container "$IMAGE" sh -c "while true; do sleep 42; done"
      for cmd in Say try-and-retry; do
        docker cp /usr/local/bin/$cmd gcc-container:/usr/bin/$cmd
      done
      if [[ "$IMAGE" == alpine* ]]; then docker exec -t gcc-container sh -c "apk update --no-progress; apk add --no-progress curl tar sudo bzip2 bash; apk add --no-progress bash icu-libs ca-certificates krb5-libs libgcc libstdc++ libintl libstdc++ tzdata userspace-rcu zlib openssl; echo"; fi
      for sh in *.sh; do
        docker cp $sh gcc-container:/$sh
      done
      Say "Build"
      docker exec -t -e USEGCC="$(USEGCC)" -e SYSTEM_ARTIFACTSDIRECTORY="$SYSTEM_ARTIFACTSDIRECTORY" -e GCCURL="$(GCCURL)" -e FLAGS="$(FLAGS)" gcc-container bash -c "
        Say --Reset-Stopwatch
        cd /
        source build-gcc-utilities.sh
        prepare_os
        bash -e build-gcc-task.sh
      "

    displayName: 'Build GCC'
    env:
        MY_FS_PASSWORD: $(FS_PASSWORD)

  - script: |
      set -e
      cd 4gcc
      source build-gcc-utilities.sh

      Say "Grab Logs"
      docker cp gcc-container:$SYSTEM_ARTIFACTSDIRECTORY/. $SYSTEM_ARTIFACTSDIRECTORY
      ls -la $SYSTEM_ARTIFACTSDIRECTORY

      Say "Grab Binaries"
      mkdir -p ~/gcc-binaries
      docker cp gcc-container:/usr/local/. ~/gcc-binaries
      pushd ~/gcc-binaries # need for path in archive
        dirsize="$(du -d 0 . | awk '{print $1}')"
        Say "Uncompressed size of [/usr/local] is [$dirsize KB]"
        if [ "$dirsize" -le 5000 ]; then
          # TODO: check for specific files instead dir size?
          Say "ERROR. Missed gcc in /usr/local"
        else
          export DEPLOY_DIR=~/gcc-deploy
          mkdir -p "$DEPLOY_DIR"
          echo "##vso[task.setvariable variable=DEPLOY_DIR]$DEPLOY_DIR"
          # Generate the 'uninstall this gcc' script for the artifact, it needs gz-archive
          tar cf - . | gzip -1 > /tmp/gcc.tar.gz
          generate_uninstall_this_gcc /tmp/gcc.tar.gz ./uninstall-this-gcc.sh
          # Pack articact including uninstall-this-gcc.sh
          sudo chown -R root:root ~/gcc-binaries
          tar cf - . | gzip -9 > $DEPLOY_DIR/$ARTIFACT.tar.gz
          build_all_known_hash_sums $DEPLOY_DIR/$ARTIFACT.tar.gz
          tar cf - . | xz -z -9 -e > $DEPLOY_DIR/$ARTIFACT.tar.xz
          build_all_known_hash_sums $DEPLOY_DIR/$ARTIFACT.tar.xz
          cp -f $DEPLOY_DIR/$ARTIFACT.tar.xz $SYSTEM_ARTIFACTSDIRECTORY/gcc.tar.xz
        fi
      popd
      Say "env"
      printenv | sort |& tee $SYSTEM_ARTIFACTSDIRECTORY/env.log

    condition: succeededOrFailed()
    displayName: 'Grab Artifacts'

  - task: PublishBuildArtifacts@1
    condition: succeededOrFailed()
    displayName: 'ALL @ Publish'
    inputs:
      pathtoPublish: '$(System.ARTIFACTSDIRECTORY)'
      artifactName: '$(Agent.JobName)'

  - task: PublishBuildArtifacts@1
    condition: and(succeededOrFailed(), ne(variables.DEPLOY_DIR,''))
    displayName: 'GCC @ Publish'
    inputs:
      pathtoPublish: '$(DEPLOY_DIR)'
      artifactName: 'GCC-BINARIES-$(Agent.JobName)'

