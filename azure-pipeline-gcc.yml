# https://mattvsts.github.io/2020/01/07/create-a-build-matrix-with-azure-pipelines/

# trigger:
# - master
variables:
  FLAGS: "-O2"

jobs:
- job: GCC
  timeoutInMinutes: 360
  strategy:
    matrix:
      '8.5-Wheezy':
        GCCURL: "https://ftp.gnu.org/gnu/gcc/gcc-8.5.0/gcc-8.5.0.tar.xz"
        IMAGE: "debian:7"
        ARTIFACT: "gcc-x86_64-linux-8.5.0"
        VERS: 'x86_64-8 x86_64-8.5 x86_64-8.5.0'
      '9.4-Wheezy':
        GCCURL: 'https://ftp.gnu.org/gnu/gcc/gcc-9.4.0/gcc-9.4.0.tar.xz'
        IMAGE: "debian:7"
        ARTIFACT: "gcc-x86_64-linux-9.4.0"
        VERS: 'x86_64-9 x86_64-9.4 x86_64-9.4.0'
      '10.2-Wheezy':
        GCCURL: "https://ftp.gnu.org/gnu/gcc/gcc-10.2.0/gcc-10.2.0.tar.xz"
        IMAGE: "debian:7"
        ARTIFACT: "gcc-x86_64-linux-10.2.0"
        VERS: 'x86_64-10.2 x86_64-10.2.0'
      '10.3-Wheezy':
        GCCURL: "https://ftp.gnu.org/gnu/gcc/gcc-10.3.0/gcc-10.3.0.tar.xz"
        IMAGE: "debian:7"
        ARTIFACT: "gcc-x86_64-linux-10.3.0"
        VERS: 'x86_64-10 x86_64-10.3 x86_64-10.3.0'
      '11.1-Wheezy':
        GCCURL: "https://ftp.gnu.org/gnu/gcc/gcc-11.1.0/gcc-11.1.0.tar.xz"
        IMAGE: "debian:7"
        ARTIFACT: "gcc-x86_64-linux-11.1.0"
        VERS: 'x86_64-11.1 x86_64-11.1.0'
      '11.2-Wheezy':
        GCCURL: "https://ftp.gnu.org/gnu/gcc/gcc-11.2.0/gcc-11.2.0.tar.xz"
        IMAGE: "debian:7"
        ARTIFACT: "gcc-x86_64-linux-11.2.0"
        VERS: 'x86_64-11 x86_64-11.2 x86_64-11.2.0'

      
      


        

  pool:
    vmImage: 'ubuntu-20.04'

  steps:

  - script: |
      set -e
      set -u
      script=https://raw.githubusercontent.com/devizer/test-and-build/master/install-build-tools-bundle.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash >/dev/null
      Say "Start image $(IMAGE)"
      docker run --privileged -t --rm -d --hostname gcc-container --name gcc-container "$IMAGE" sh -c "while true; do sleep 42; done"
      for cmd in Say try-and-retry; do
        docker cp /usr/local/bin/$cmd gcc-container:/usr/bin/$cmd
      done
      if [[ "$IMAGE" == alpine* ]]; then docker exec -t gcc-container sh -c "apk update --no-progress; apk add --no-progress curl tar sudo bzip2 bash; apk add --no-progress bash icu-libs ca-certificates krb5-libs libgcc libstdc++ libintl libstdc++ tzdata userspace-rcu zlib openssl; echo"; fi
      docker cp build-gcc-task.sh gcc-container:/build-gcc-task.sh
      Say "Build"
      docker exec -t -e SYSTEM_ARTIFACTSDIRECTORY="$SYSTEM_ARTIFACTSDIRECTORY" -e GCCURL="$(GCCURL)" -e FLAGS="$(FLAGS)" gcc-container bash -c "
        Say --Reset-Stopwatch
        bash -e /build-gcc-task.sh
      "

    displayName: 'Build GCC'


  - script: |
      function build_sums() {
        local file="$1"
        for alg in md5 sha1 sha224 sha256 sha384 sha512; do
          if [[ "$(command -v ${alg}sum)" != "" ]]; then
            local sum=$(eval ${alg}sum $1 | awk '{print $1}')
            printf "$sum" > "$1.${alg}"
          else
            echo "warning! hehe42sum missing"
          fi
        done
      }

      Say "Grab Logs"
      docker cp gcc-container:$SYSTEM_ARTIFACTSDIRECTORY/. $SYSTEM_ARTIFACTSDIRECTORY
      ls -la $SYSTEM_ARTIFACTSDIRECTORY



      Say "Grab Binaries"
      mkdir -p ~/gcc-binaries
      docker cp gcc-container:/usr/local/. ~/gcc-binaries
      pushd ~/gcc-binaries
        dirsize="$(du -d 0 . | awk '{print $1}')"
        Say "Uncopressed size of [/usr/local] is [$dirsize KB]"
        if [ "$dirsize" -le 5000 ]; then
          Say "ERROR. Missed gcc in /usr/local"
        else
          tar cf - . | gzip -9 > $SYSTEM_ARTIFACTSDIRECTORY/$ARTIFACT.tar.gz
          build_sums $SYSTEM_ARTIFACTSDIRECTORY/$ARTIFACT.tar.gz
          tar cf - . | xz -z -9 -e > $SYSTEM_ARTIFACTSDIRECTORY/$ARTIFACT.tar.xz
          build_sums $SYSTEM_ARTIFACTSDIRECTORY/$ARTIFACT.tar.xz
        fi
      popd
      Say "env"
      printenv | sort |& tee $SYSTEM_ARTIFACTSDIRECTORY/env.log

    condition: succeededOrFailed()
    displayName: 'Grab Artifacts'

  - task: PublishBuildArtifacts@1
    condition: succeededOrFailed()
    inputs:
      pathtoPublish: '$(System.ARTIFACTSDIRECTORY)'
      artifactName: '$(Agent.JobName)'

