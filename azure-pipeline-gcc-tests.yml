# https://mattvsts.github.io/2020/01/07/create-a-build-matrix-with-azure-pipelines/

# trigger:
# - master
variables:
  FLAGS: "-O2"

jobs:
- job: TEST
  pool:
    vmImage: 'ubuntu-20.04'
  timeoutInMinutes: 360
  strategy:
    matrix:
      'System-CentOS-6':
        GCC: ""
        IMAGE: "centos:6"
      '9.4-Wheezy':
        GCC: "9.4"
        IMAGE: "debian:7"

      # Missed ARM on cent os build
      '8.5-CentOS-7-arm':
        GCC: "8.5"
        IMAGE: 'centos@sha256:1cef7b00a46a2a90c62eef9a9707d01d19c2f5e253b7ccc574ccaa775063d7e0' # 'arm32v7/centos:7' doesnt work (stgmentation fault)
        QEMU: armhf
      '8.5-CentOS-7-arm64':
        GCC: "8.5"
        IMAGE: 'centos@sha256:864a7acea4a5e8fa7a4d83720fbcbadbe38b183f46f3600e04a3f8c1d961ed87' # 'arm64v8/centos:7' works
        QEMU: arm64

      '8.5-Fedora-24-arm':
        GCC: "8.5"
        IMAGE: 'arm32v7/fedora:24'
        QEMU: armhf
      '8.5-Fedora-24-arm64':
        GCC: "8.5"
        IMAGE: 'arm64v8/fedora:24'
        QEMU: arm64

      '8.5-Fedora-25-arm':
        GCC: "8.5"
        IMAGE: 'arm32v7/fedora:25'
        QEMU: armhf
      '8.5-Fedora-25-arm64':
        GCC: "8.5"
        IMAGE: 'arm64v8/fedora:25'
        QEMU: arm64

      '8.5-Fedora-26-arm':
        GCC: "8.5"
        IMAGE: 'arm32v7/fedora:26'
        QEMU: armhf
      '8.5-Fedora-26-arm64':
        GCC: "8.5"
        IMAGE: 'arm64v8/fedora:26'
        QEMU: arm64

      '8.5-Fedora-31-arm':
        GCC: "8.5"
        IMAGE: 'arm32v7/fedora:31'
        QEMU: armhf
      '8.5-Fedora-31-arm64':
        GCC: "8.5"
        IMAGE: 'arm64v8/fedora:31'
        QEMU: arm64

      # below 32 is EOL
      '8.5-Fedora-32-arm':
        GCC: "8.5"
        IMAGE: 'arm32v7/fedora:32'
        QEMU: armhf
      '8.5-Fedora-32-arm64':
        GCC: "8.5"
        IMAGE: 'arm64v8/fedora:32'
        QEMU: arm64


      '8.5-Jessie-arm':
        GCC: "8.5"
        IMAGE: "multiarch/debian-debootstrap:armhf-jessie"
        QEMU: armhf
      '8.5-Stretch-arm':
        GCC: "8.5"
        IMAGE: "multiarch/debian-debootstrap:armhf-stretch"
        QEMU: armhf
      '8.5-Buster-arm':
        GCC: "8.5"
        IMAGE: "multiarch/debian-debootstrap:armhf-buster"
        QEMU: armhf
      '8.5-Bullseye-arm':
        GCC: "8.5"
        IMAGE: "multiarch/debian-debootstrap:armhf-bullseye"
        QEMU: armhf
        
      '8.5-Jessie-arm64':
        GCC: "8.5"
        IMAGE: "multiarch/debian-debootstrap:arm64-jessie"
        QEMU: arm64
      '8.5-Stretch-arm64':
        GCC: "8.5"
        IMAGE: "multiarch/debian-debootstrap:arm64-stretch"
        QEMU: arm64
      '8.5-Buster-arm64':
        GCC: "8.5"
        IMAGE: "multiarch/debian-debootstrap:arm64-buster"
        QEMU: arm64
      '8.5-Bullseye-arm64':
        GCC: "8.5"
        IMAGE: "multiarch/debian-debootstrap:arm64-bullseye"
        QEMU: arm64

      '7.5-Jessie':
        GCC: "7.5"
        IMAGE: "debian:8"
      '7.5-Stretch':
        GCC: "7.5"
        IMAGE: "debian:9"
      '7.5-Buster':
        GCC: "7.5"
        IMAGE: "debian:10"
      '7.5-Bullseye':
        GCC: "7.5"
        IMAGE: "debian:11"

      '8.5-Jessie':
        GCC: "8.5"
        IMAGE: "debian:8"
      '8.5-Stretch':
        GCC: "8.5"
        IMAGE: "debian:9"
      '8.5-Buster':
        GCC: "8.5"
        IMAGE: "debian:10"
      '8.5-Bullseye':
        GCC: "8.5"
        IMAGE: "debian:11"

      '9.4-Jessie':
        GCC: "9.4"
        IMAGE: "debian:8"
      '9.4-Stretch':
        GCC: "9.4"
        IMAGE: "debian:9"
      '9.4-Buster':
        GCC: "9.4"
        IMAGE: "debian:10"
      '9.4-Bullseye':
        GCC: "9.4"
        IMAGE: "debian:11"

      '10.3-Jessie':
        GCC: "10.3"
        IMAGE: "debian:8"
      '10.3-Stretch':
        GCC: "10.3"
        IMAGE: "debian:9"
      '10.3-Buster':
        GCC: "10.3"
        IMAGE: "debian:10"
      '10.3-Bullseye':
        GCC: "10.3"
        IMAGE: "debian:11"

      '7.5-CentOS-7':
        GCC: "7.5"
        IMAGE: "centos:7"
      '11.2-Ubuntu-22.04':
        GCC: "11.2"
        IMAGE: "ubuntu:22.04"
      '11.2-Ubuntu-20.04':
        GCC: "11.2"
        IMAGE: "ubuntu:20.04"
      '11.2-CentOS-8':
        GCC: "11.2"
        IMAGE: "centos:8"
      '11.2-CentOS-7':
        GCC: "11.2"
        IMAGE: "centos:7"
      '11.2-Fedora-24':
        GCC: "11.2"
        IMAGE: "fedora:24"
      '11.2-Fedora-35':
        GCC: "11.2"
        IMAGE: "fedora:35"

      '7.5-Ubuntu-22.04':
        GCC: "7.5"
        IMAGE: "ubuntu:22.04"
      '7.5-Ubuntu-20.04':
        GCC: "7.5"
        IMAGE: "ubuntu:20.04"
      '7.5-CentOS-8':
        GCC: "7.5"
        IMAGE: "centos:8"
      '7.5-Fedora-24':
        GCC: "7.5"
        IMAGE: "fedora:24"
      '7.5-Fedora-35':
        GCC: "7.5"
        IMAGE: "fedora:35"


      'System-Jessie':
        GCC: ""
        IMAGE: "debian:8"
      'System-Stretch':
        GCC: ""
        IMAGE: "debian:9"
      'System-Buster':
        GCC: ""
        IMAGE: "debian:10"
      'System-Bullseye':
        GCC: ""
        IMAGE: "debian:11"
      
      '11.1-Jessie':
        GCC: "11.1"
        IMAGE: "debian:8"
      '11.2-Jessie':
        GCC: "11.2"
        IMAGE: "debian:8"

      '11.1-Buster':
        GCC: "11.1"
        IMAGE: "debian:10"
      '11.2-Buster':
        GCC: "11.2"
        IMAGE: "debian:10"

      '8.5-Wheezy':
        GCC: "8.5"
        IMAGE: "debian:7"
      'System-Wheezy':
        GCC: ""
        IMAGE: "debian:7"
      '11.1-Wheezy':
        GCC: "11.1"
        IMAGE: "debian:7"
      '11.2-Wheezy':
        GCC: "11.2"
        IMAGE: "debian:7"
      '10.2-Wheezy':
        GCC: "10.2"
        IMAGE: "debian:7"
      '10.3-Wheezy':
        GCC: "10.3"
        IMAGE: "debian:7"


  steps:

  - script: |
        sudo apt-get install sshpass rsync -y -qq
        mkdir -p ~/.ssh; printf "Host *\n   StrictHostKeyChecking no\n   UserKnownHostsFile=/dev/null" > ~/.ssh/config
        echo "Login length: [${#LOGIN}]"; echo "Password length: [${#PASSWORD}]"
        echo "[$date] TODO ..." > /tmp/readme
        sshpass -p "$PASSWORD" rsync -r /tmp/readme "${LOGIN}@frs.sourceforge.net:/home/frs/p/fio/build-matrix"
        echo OKey
    condition: False
    displayName: 'test sf'
    env:
        PASSWORD: $(SECRET_PASSWORD)
        LOGIN: $(SECRET_LOGIN)

  - script: |
      set -e
      set -u
      script=https://raw.githubusercontent.com/devizer/test-and-build/master/install-build-tools-bundle.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash >/dev/null
      cd 4gcc

      source build-gcc-utilities.sh 
      Say "CPU: [$(get_cpu_name)]"

      try-and-retry sudo apt-get install util-linux hwinfo -y -qq >/dev/null
      sudo lscpu > $SYSTEM_ARTIFACTSDIRECTORY/lscpu-on-the-host.log
      sudo hwinfo > $SYSTEM_ARTIFACTSDIRECTORY/hwinfo-on-the-host.log
      cat /proc/cpuinfo > $SYSTEM_ARTIFACTSDIRECTORY/cpuinfo-on-the-host.log

      if [[ "${QEMU:-}" != "" ]]; then
        Say "Check if [qemu-user-static] is installed"
        sudo apt-get install qemu-user-static -y -qq >/dev/null
        Say "Register qemu user static"
        docker run --rm --privileged multiarch/qemu-user-static:register --reset
      fi
      
      Say "Start image $(IMAGE)"
      docker run --privileged -t --rm -d --hostname gcc-container --name gcc-container -v /usr/bin/qemu-arm-static:/usr/bin/qemu-arm-static -v /usr/bin/qemu-aarch64-static:/usr/bin/qemu-aarch64-static "$IMAGE" sh -c "while true; do sleep 42; done"
      for cmd in Say try-and-retry; do
        docker cp /usr/local/bin/$cmd gcc-container:/usr/bin/$cmd
      done
      if [[ "$IMAGE" == alpine* ]]; then docker exec -t gcc-container sh -c "apk update --no-progress; apk add --no-progress curl tar sudo bzip2 bash; apk add --no-progress bash icu-libs ca-certificates krb5-libs libgcc libstdc++ libintl libstdc++ tzdata userspace-rcu zlib openssl; echo"; fi
      for sh in *.sh; do
        docker cp $sh gcc-container:/$sh
      done

      Say "Test GCC $(GCC)"
      docker exec -t -e GCC="$(GCC)" -e SYSTEM_ARTIFACTSDIRECTORY="$SYSTEM_ARTIFACTSDIRECTORY" gcc-container bash -c "
        set -e; set -u; set -o pipefail; Say --Reset-Stopwatch
        Say 'Starting container (taget gcc ver is [$(GCC)]) ... '
        cd /
        source build-gcc-utilities.sh
        prepare_os
        install_precompiled_gcc "$(GCC)" | cat
        source test-gcc.sh
      "

    displayName: 'Test GCC'

  - script: |
      mkdir -p ~/gcc-from-container; pushd ~/gcc-from-container
      Say "Grab Logs"
      docker cp gcc-container:$SYSTEM_ARTIFACTSDIRECTORY/. $(pwd)
      tar czf "$SYSTEM_ARTIFACTSDIRECTORY/from-container ($SYSTEM_JOBDISPLAYNAME).tar.gz" .
      ls -la
    condition: succeededOrFailed()
    displayName: 'Grab Artifacts'

  - script: |
       set -e
       cd 4gcc

       scripts="$(pwd)"
       cd ~/gcc-from-container
       Ldd_Version=$(cat ldd-version.log)
       Say "Ldd_Version: [$Ldd_Version]"
       bash -c "source $scripts/build-gcc-utilities.sh; source $scripts/deploy-fio-from-container.sh"
    condition: succeededOrFailed()
    displayName: 'Deploy'
    env:
        PASSWORD: $(SECRET_PASSWORD)
        LOGIN: $(SECRET_LOGIN)
        SSH_HOST_AND_PATH: $(SECRET_SSH_HOST_AND_PATH)

  - task: PublishBuildArtifacts@1
    condition: succeededOrFailed()
    displayName: 'ALL @ Publish'
    inputs:
      pathtoPublish: '$(System.ARTIFACTSDIRECTORY)'
      artifactName: '$(Agent.JobName)'
